# -*- coding: utf-8 -*-
"""AlgoTrading.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y7vRLww_RQKKpGz-0E1IQ0KfdYuJ27NA
"""

!pip install yfinance

import yfinance as yf
import pandas as pd

df = yf.download('WIPRO.NS')

df.head()

df.tail()

import numpy as np
import math
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models  import Sequential
from tensorflow.keras.layers import Dense,LSTM

plt.figure(figsize=(10,5))
plt.title('Close Price History')
plt.plot(df['Close'])
plt.xlabel('Date',fontsize=18)
plt.ylabel('Close Price USD ($)',fontsize=18)
plt.show()

data = df.filter(['Close'])
df = np.array(data).reshape(-1,1)
df

scaler = MinMaxScaler(feature_range=(0,1))
scaled_df = scaler.fit_transform(np.array(df).reshape(-1,1))
scaled_df

training_data_len = math.ceil(len(scaled_df)*0.8)
training_data_len

train_data = scaled_df[0:training_data_len, :]
x_train = []
y_train = []
for i in range(60, len(train_data)):
    x_train.append(train_data[i-60:i,0])
    y_train.append(train_data[i,0])
    if i<=60:
        print(x_train)
        print(y_train)
        print()

x_train, y_train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
print(x_train.shape)
print(y_train.shape)

model = Sequential()

# Bidirectional LSTM layer
model.add(Bidirectional(LSTM(50, return_sequences=True), input_shape=(x_train.shape[1], 1)))
model.add(Bidirectional(LSTM(50, return_sequences=False)))

model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(x_train, y_train, batch_size=32, epochs=20)

model.summary()

test_data = scaled_df[training_data_len - 60: , :]
x_test = []
y_test = df[training_data_len: , :]
for i in range(60, len(test_data)):
    x_test.append(test_data[i-60:i,0])

x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

prediction = model.predict(x_test)
prediction = scaler.inverse_transform(prediction)
rmse = np.sqrt(np.mean((prediction-y_test)**2))
rmse

"""### **Visualization Between Test Data Vs. Predicted Data**"""

train = data[:training_data_len]
value = data[training_data_len:]
value['prediction'] = prediction
plt.figure(figsize=(10,5))
plt.title('Model')
plt.xlabel('Date',fontsize=18)
plt.ylabel('Close Price USD ($)',fontsize=18)
plt.plot(train['Close'])
plt.plot(value[['Close', 'prediction']],)
plt.legend(['train', 'value', 'prediction'], loc='lower right')
plt.show()

test = df[training_data_len:]
plt.figure(figsize=(10,5))
plt.title('Historical Price')
plt.plot(test)
plt.plot(prediction)
plt.legend(['train','prediction'] , loc='lower right')
plt.xlabel('Days', fontsize=18)
plt.ylabel('Close_Price', fontsize=18)
plt.show()

# # Let's first load and read the content of the uploaded file to understand the code
# file_path = '/mnt/data/algotrading.py'

# # Reading the content of the file
# with open(file_path, 'r') as file:
#     code_content = file.read()

# # Displaying the first few lines to get an understanding of the script
# code_content[:1000]  # Displaying the first 1000 characters of the file